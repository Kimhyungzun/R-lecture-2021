json_pi <- toJSON(pi, digits=3)
json_pi
fromJSON(json_pi)
json_person <- toJSON(person)
json_person
prettify(json_person)
df_json_person <- fromJSON(person)
df_json_person <- fromJSON(json_person)
df_json_person
str(df_json_person)
# 두개의 데이터프레임의 데이터 값이 같은지 비교
all(person == df_json_person)
# cars 내장 데이터로 테스트
cars
json_cars <- toJSON(cars)
df_json_cars <- fromJSON(json_cars)
all(cars == df_json_cars`)
# cars 내장 데이터로 테스트
cars
json_cars <- toJSON(cars)
df_json_cars <- fromJSON(json_cars)
all(cars == df_json_cars`)
# cars 내장 데이터로 테스트
cars
json_cars <- toJSON(cars)
df_json_cars <- fromJSON(json_cars)
all(cars == df_json_cars)
# json 파일로 부터 읽어서 데이터프레임 만들기
library(jsonlite)
wiki_person <- fromJSON('OpenApi/person.json')
str(wiki_person)
class(wiki_person)
wiki_person
# sample.json
data <- fromJSON('OpenApi/sample.json')
str(data)
data <- as.data.frame(data)
names(data) <- c('id','like','share','comment','unique','msg','time')
data$like <- as.numeric(as.character(data$like))
view(data)
write_csv(data, 'OpenApi/data.csv')
# 다음 책 검색
library(httr)
library(jsonlite)
kakao_api_key <- readLines('OpenApi/kakao_api_key.txt')
getwd()
kakao_api_key <- readLines('OpenApi/kakao_api_key.txt',encoding = 'UTF-8')
kakao_api_key
keyword <- URLencode(iconv('데이터 분석', to='UTF-8'))
keyword
base_url <- 'https:/dapi.kakao.com/v3/search/book'
keyword <- URLencode(iconv('데이터 분석', to='UTF-8'))
keyword
query <- paste0('target=title&query=',keyword)
url <- paste0(base_url, query, sep='?')
ur
url
base_url <- 'https://dapi.kakao.com/v3/search/book'
keyword <- URLencode(iconv('데이터 분석', to='UTF-8'))
keyword
query <- paste0('target=title&query=',keyword)
url <- paste0(base_url, query, sep='?')
url
auth_key <- paste('KakaoAK', kakao_api_key)
auth_key
res <- GET(url, add_headers('Authorization'=auth_key))
res
# 다음 책 검색
library(httr)
library(jsonlite)
getwd()
kakao_api_key <- readLines('OpenApi/kakao_api_key.txt',encoding = 'UTF-8')
kakao_api_key
base_url <- 'https://dapi.kakao.com/v3/search/book'
keyword <- URLencode(iconv('데이터 분석', to='UTF-8'))
keyword
query <- paste0('target=title&query=',keyword)
url <- paste0(base_url, query, sep='?')
url
auth_key <- paste('KakaoAK', kakao_api_key)
auth_key
res <- GET(url, add_headers('Authorization'=auth_key))
res
# 다음 책 검색
library(httr)
library(jsonlite)
kakao_api_key <- readLines('OpenApi/kakao_api_key.txt',encoding = 'UTF-8')
kakao_api_key
base_url <- 'https://dapi.kakao.com/v3/search/book'
keyword <- URLencode(iconv('데이터 분석', to='UTF-8'))
keyword
query <- paste0('target=title&query=',keyword)
url <- paste0(base_url, query, sep='?')
url
auth_key <- paste('KakaoAK', kakao_api_key)
auth_key
res <- GET(url, add_headers('Authorization'=auth_key))
res
# 다음 책 검색
library(httr)
library(jsonlite)
kakao_api_key <- readLines('OpenApi/kakao_api_key.txt',encoding = 'UTF-8')
kakao_api_key
base_url <- 'https://dapi.kakao.com/v3/search/book'
keyword <- URLencode(iconv('데이터 분석', to = 'UTF-8'))
keyword
query <- paste0('target=title&query=', keyword)
url <- paste0(base_url, query, sep='?')
url
auth_key <- paste('KakaoAK', kakao_api_key)
auth_key
res <- GET(url, add_headers('Authorization'=auth_key))
res
# 다음 책 검색
library(httr)
library(jsonlite)
kakao_api_key <- readLines('OpenApi/kakao_api_key.txt',encoding = 'UTF-8')
kakao_api_key
base_url <- 'https://dapi.kakao.com/v3/search/book'
keyword <- URLencode(iconv('데이터 분석', to = 'UTF-8'))
keyword
query <- paste0('target=title&query=', keyword)
url <- paste0(base_url, query, sep='?')
url
auth_key <- paste('KakaoAK', kakao_api_key)
auth_key
res <- GET(url, add_headers('Authorization'=auth_key))
res
# 다음 책 검색
library(httr)
library(jsonlite)
kakao_api_key <- readLines('OpenApi/kakao_api_key.txt',encoding = 'UTF-8')
kakao_api_key
base_url <- 'https://dapi.kakao.com/v3/search/book'
keyword <- URLencode(iconv('데이터 분석', to = 'UTF-8'))
keyword
query <- paste0('target=title&query=', keyword)
url <- paste0(base_url, query, sep='?')
url
auth_key <- paste('KakaoAK', kakao_api_key)
auth_key
res <- GET(url, add_headers('Authorization'=auth_key))
res
# 다음 책 검색
library(httr)
library(jsonlite)
kakao_api_key <- readLines('OpenApi/kakao_api_key.txt',encoding = 'UTF-8')
kakao_api_key
base_url <- 'https://dapi.kakao.com/v3/search/book'
keyword <- URLencode(iconv('데이터 분석', to = 'UTF-8'))
keyword
query <- paste0('target=title&query=', keyword)
url <- paste0(base_url, query, sep='?')
url
auth_key <- paste('KakaoAK', kakao_api_key)
auth_key
res <- GET(url, add_headers('Authorization'=auth_key))
res
url <- paste(base_url, query, sep='?')
url
auth_key <- paste('KakaoAK', kakao_api_key)
auth_key
res <- GET(url, add_headers('Authorization'=auth_key))
res
library(httr)
library(httr)
library(httr)
library(httr)
library(httr)
library(httr)
# 다음 책 검색
library(httr)
library(jsonlite)
kakao_api_key <- readLines('OpenApi/kakao_api_key.txt',encoding = 'UTF-8')
kakao_api_key
base_url <- 'https://dapi.kakao.com/v3/search/book'
keyword <- URLencode(iconv('데이터 분석', to = 'UTF-8'))
keyword
query <- paste0('target=title&query=', keyword)
url <- paste(base_url, query, sep='?')
url
auth_key <- paste('KakaoAK', kakao_api_key)
auth_key
res <- GET(url, add_headers('Authorization'=auth_key))
res
# 다음 책 검색
library(httr)
library(jsonlite)
kakao_api_key <- readLines('OpenApi/kakao_api_key.txt',encoding = 'UTF-8')
kakao_api_key
base_url <- 'https://dapi.kakao.com/v3/search/book'
keyword <- URLencode(iconv('데이터 분석', to = 'UTF-8'))
keyword
query <- paste0('target=title&query=', keyword)
url <- paste(base_url, query, sep='?')
url
auth_key <- paste('KakaoAK', kakao_api_key)
auth_key
res <- GET(url, add_headers('Authorization'=auth_key))
res
fromJSON(res)
fromJSON(as.character(res))
result <- fromJSON(as.character(res))
result
class(result)
df <- as.data.frame(result)
view(df)
View(df)
write.csv(df, 'OpenApi/book.csv', fileEncoding = 'utf-8')
write.csv(as.matrix(df), 'OpenApi/book.csv', fileEncoding = 'utf-8')
write.csv(as.matrix(df), 'OpenApi/book.csv', fileEncoding = 'utf-8',
row.names = F)
df2 <- read.csv('OpenApi/book.csv', fileEncoding = 'utf-8')
# 내용중에 ','가 있어서 제대로 못 읽어서 sep를 \t로 변경
write.table(as.matrix(df), 'OpenApi/book.csv', fileEncoding = 'utf-8',
row.names = F, sep='t')
df2 <- read.csv('OpenApi/book.csv', fileEncoding = 'utf-8',sep='t')
# 다음 책 검색
library(httr)
library(jsonlite)
kakao_api_key <- readLines('OpenApi/kakao_api_key.txt',encoding = 'UTF-8')
kakao_api_key
base_url <- 'https://dapi.kakao.com/v3/search/book'
keyword <- URLencode(iconv('데이터 분석', to = 'UTF-8'))
keyword
query <- paste0('target=title&query=', keyword)
url <- paste(base_url, query, sep='?')
url
auth_key <- paste('KakaoAK', kakao_api_key)
auth_key
res <- GET(url, add_headers('Authorization'=auth_key))
res
result <- fromJSON(as.character(res))
class(result)           # 결과는 리스트
df <- as.data.frame(result)
View(df)
write.csv(df, 'OpenApi/book.csv', fileEncoding = 'utf-8')
# 결과가 리스트 이기 때문에 매트릭스로 변환하여 저장
write.csv(as.matrix(df), 'OpenApi/book.csv', fileEncoding = 'utf-8',
row.names = F)
# 내용중에 ','가 있어서 제대로 못 읽어서 sep를 \t로 변경
write.table(as.matrix(df), 'OpenApi/book.csv', fileEncoding = 'utf-8',
row.names = F, sep='t')
df2 <- read.csv('OpenApi/book.csv', fileEncoding = 'utf-8',sep='t')
View(df)
getwd()
write.csv(df, 'OpenApi/book.csv', fileEncoding = 'utf-8')
# 결과가 리스트 이기 때문에 매트릭스로 변환하여 저장
write.csv(as.matrix(df), 'OpenApi/book.csv', fileEncoding = 'utf-8',
row.names = F)
# 내용중에 ','가 있어서 제대로 못 읽어서 sep를 \t로 변경
write.table(as.matrix(df), 'OpenApi/book.csv', fileEncoding = 'utf-8',
row.names = F, sep='\t')
df2 <- read.csv('OpenApi/book.tsv', fileEncoding = 'utf-8',sep='\t')
# 다음 책 검색
library(httr)
library(jsonlite)
kakao_api_key <- readLines('OpenApi/kakao_api_key.txt',encoding = 'UTF-8')
kakao_api_key
base_url <- 'https://dapi.kakao.com/v3/search/book'
keyword <- URLencode(iconv('데이터 분석', to = 'UTF-8'))
keyword
query <- paste0('target=title&query=', keyword)
url <- paste(base_url, query, sep='?')
url
auth_key <- paste('KakaoAK', kakao_api_key)
auth_key
res <- GET(url, add_headers('Authorization'=auth_key))
res
result <- fromJSON(as.character(res))
class(result)           # 결과는 리스트
df <- as.data.frame(result)
View(df)
write.csv(df, 'OpenApi/book.csv', fileEncoding = 'utf-8')
# 결과가 리스트 이기 때문에 매트릭스로 변환하여 저장
write.csv(as.matrix(df), 'OpenApi/book.csv', fileEncoding = 'utf-8',
row.names = F)
# 내용중에 ','가 있어서 제대로 못 읽어서 sep를 \t로 변경
write.table(as.matrix(df), 'OpenApi/book.csv', fileEncoding = 'utf-8',
row.names = F, sep='\t')
df2 <- read.csv('OpenApi/book.tsv', fileEncoding = 'utf-8',sep='\t')
# 다음 책 검색
library(httr)
library(jsonlite)
kakao_api_key <- readLines('OpenApi/kakao_api_key.txt',encoding = 'UTF-8')
kakao_api_key
base_url <- 'https://dapi.kakao.com/v3/search/book'
keyword <- URLencode(iconv('데이터 분석', to = 'UTF-8'))
keyword
query <- paste0('target=title&query=', keyword)
url <- paste(base_url, query, sep='?')
url
auth_key <- paste('KakaoAK', kakao_api_key)
auth_key
res <- GET(url, add_headers('Authorization'=auth_key))
res
result <- fromJSON(as.character(res))
class(result)           # 결과는 리스트
df <- as.data.frame(result)
View(df)
write.csv(df, 'OpenApi/book.csv', fileEncoding = 'utf-8')
# 결과가 리스트 이기 때문에 매트릭스로 변환하여 저장
write.csv(as.matrix(df), 'OpenApi/book.csv', fileEncoding = 'utf-8',
row.names = F)
# 내용중에 ','가 있어서 제대로 못 읽어서 sep를 \t로 변경
write.table(as.matrix(df), 'OpenApi/book.csv', fileEncoding = 'utf-8',
row.names = F, sep='\t')
df2 <- read.csv('OpenApi/book.tsv', fileEncoding = 'utf-8',sep='\t')
# 내용중에 ','가 있어서 제대로 못 읽어서 sep를 \t로 변경
write.table(as.matrix(df), 'OpenApi/book.csv', fileEncoding = 'utf-8',
row.names = F, sep='\t')
df2 <- read.csv('OpenApi/book.tsv', fileEncoding = 'utf-8',sep='\t')
# 내용중에 ','가 있어서 제대로 못 읽어서 sep를 \t로 변경
write.table(as.matrix(df), 'OpenApi/book.tsv', fileEncoding = 'utf-8',
row.names = F, sep='\t')
df2 <- read.csv('OpenApi/book.tsv', fileEncoding = 'utf-8',sep='\t')
keyword
library(httr)
library(jsonlite)
api_key <- readLines('OpenApi/api_key.txt', encoding = 'UTF-8')
api_key
url
auth_key
res
base_url <- 'http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg'
keyword <- URLencode(iconv('사망자수', to = 'UTF-8'))
keyword
url <- paste(base_url,'ServiceKey=',api_key, sep='?')
res
res <- url
result <- fromJSON(as.character(res))
class(result)           # 결과는 리스트
df <- as.data.frame(result)
View(df)
result <- fromJSON(as.character(url))
class(result)           # 결과는 리스트
df <- as.data.frame(result)
View(df)
url
url <- paste(base_url,'ServiceKey=', sep='?')
url
url <- paste0(url, api_key)
url
result <- fromJSON(as.character(url))
class(result)           # 결과는 리스트
url
code <- '&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
url'
url <- paste0(url, code)
rul
url
result <- fromJSON(as.character(url))
class(result)           # 결과는 리스트
df <- as.data.frame(result)
View(df)
library(httr)
library(jsonlite)
api_key <- readLines('OpenApi/api_key.txt', encoding = 'UTF-8')
api_key
base_url <- 'http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg'
keyword
api_key
library(XML)
library(RCurl)
api_key <- readLines('OpenApi/api_key.txt', encoding = 'UTF-8')
api_key
base_url <- 'http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg'
url_1 <- paste(base_url,'ServiceKey=', sep='?')
url <- paste0(url, api_key)
code <- '&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
url'
url <- paste0(url, code)
url
result <- fromJSON(as.character(url))
base_url <- 'http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg'
url_1 <- paste(base_url,'ServiceKey=', sep='?')
url <- paste0(url, api_key)
code <- '&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
url'
url <- paste0(url, code)
url
result <- fromJSON(as.character(url))
class(result)           # 결과는 리스트
url
base_url <- 'http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg'
url_1 <- paste(base_url,'ServiceKey=', sep='?')
url <- paste0(url, api_key)
code <- '&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1url'
url <- paste0(url, code)
url
library(httr)
library(jsonlite)
library(XML)
library(RCurl)
api_key <- readLines('OpenApi/api_key.txt', encoding = 'UTF-8')
api_key
base_url <- 'http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg'
url_1 <- paste(base_url,'ServiceKey=', sep='?')
url <- paste0(url, api_key)
code <- '&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1url'
url <- paste0(url, code)
url
result <- fromJSON(as.character(url))
library(httr)
library(jsonlite)
library(XML)
library(RCurl)
api_key <- readLines('OpenApi/api_key.txt', encoding = 'UTF-8')
api_key
base_url <- 'http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg'
url_1 <- paste(base_url,'ServiceKey=', sep='?')
url <- paste0(url_1, api_key)
code <- '&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1url'
url <- paste0(url, code)
url
library(httr)
library(jsonlite)
library(XML)
library(RCurl)
api_key <- readLines('OpenApi/api_key.txt', encoding = 'UTF-8')
api_key
library(httr)
library(jsonlite)
library(XML)
library(RCurl)
api_key <- readLines('OpenApi/api_key.txt', encoding = 'UTF-8')
api_key
base_url <- 'http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg'
url_1 <- paste(base_url,'ServiceKey=', sep='?')
url_2 <- paste0(url_1, api_key)
code <- '&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1url'
url <- paste0(url_2, code)
url
result <- fromJSON(as.character(url))
# 다음 책 검색
library(httr)
library(jsonlite)
kakao_api_key <- readLines('OpenApi/kakao_api_key.txt',encoding = 'UTF-8')
kakao_api_key
base_url <- 'https://dapi.kakao.com/v3/search/book'
keyword <- URLencode(iconv('데이터 분석', to = 'UTF-8'))
keyword
query <- paste0('target=title&query=', keyword)
url <- paste(base_url, query, sep='?')
url
auth_key <- paste('KakaoAK', kakao_api_key)
auth_key
res <- GET(url, add_headers('Authorization'=auth_key))
res
result <- fromJSON(as.character(res))
class(result)           # 결과는 리스트
df <- as.data.frame(result)
View(df)
res
library(httr)
library(jsonlite)
library(XML)
library(RCurl)
api_key <- readLines('OpenApi/api_key.txt', encoding = 'UTF-8')
api_key
library(httr)
library(jsonlite)
library(XML)
library(RCurl)
api_key <- readLines('OpenApi/api_key.txt', encoding = 'UTF-8')
api_key
base_url <- 'http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg'
url_1 <- paste(base_url,'ServiceKey=', sep='?')
url_2 <- paste0(url_1, api_key)
code <- '&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1url'
url <- paste0(url_2, code)
url
result <- fromJSON(as.character(url))
res <- GET(url)
result <- fromJSON(as.character(url))
result <- fromJSON(as.character(res))
url
http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg?ServiceKey=서비스키&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1
library(httr)
library(jsonlite)
library(XML)
library(RCurl)
api_key <- readLines('OpenApi/api_key.txt', encoding = 'UTF-8')
api_key
base_url <- 'http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg'
url_1 <- paste(base_url,'ServiceKey=', sep='?')
url_2 <- paste0(url_1, api_key)
code <- '&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1'
url <- paste0(url_2, code)
url
result <- fromJSON(as.character(url))
class(result)           # 결과는 리스트
df <- as.data.frame(result)
View(df)
function (x, df1, df2, ncp, log = FALSE)
url
library(httr)
library(jsonlite)
library(XML)
library(RCurl)
api_key <- readLines('OpenApi/api_key.txt', encoding = 'UTF-8')
api_key
base_url <- 'http://apis.data.go.kr/B552061/frequentzoneLg/getRestFrequentzoneLg'
url_1 <- paste(base_url,'ServiceKey=', sep='?')
url_2 <- paste0(url_1, api_key)
code <- '&searchYearCd=2017&siDo=26&guGun=110&numOfRows=10&pageNo=1'
url <- paste0(url_2, code)
url
result <- fromJSON(as.character(url))
class(result)           # 결과는 리스트
df <- as.data.frame(result)
View(df)
