library(rpart)
head(iris)
dtc <- rpart(Species ~ ., iris)     # iris 데이터를 결정 트리로 학습
summary(dtc)
dtc
# 결정 트리 시각화
par(mflow=c(1,1),xpd=NA)
plot(dtc)
text(dtc, use.n = T)
# 예측
pred <- predict(dtc, iris, type='class')
table(pred, iris$Species)                 # (50+49+45)/150
library(rpart)
# 1. DT(decision tree)
ucla <- read.csv('https://stats.idre.ucla.edu/stat/data/binary.csv')
str(ucla)
ucla$admit <- as.factor(ucla$admit)
str(ucla)
dtc <- rpart(admit ~., ucla)
dtc
par(mflow=c(1,1),xpd=NA)
plot(dtc)
text(dtc, use.n = T)
# 예측
pred <- predict(dtc, ucla, type='class')
table(pred, ucla$admit)
library(rpart)
head(iris)
dtc <- rpart(Species ~ ., iris)     # iris 데이터를 결정 트리로 학습
summary(dtc)
dtc
# 결정 트리 시각화
par(mflow=c(1,1),xpd=NA)
plot(dtc)
text(dtc, use.n = T)
# 예측
pred <- predict(dtc, iris, type='class')
table(pred, iris$Species)
library(rpart)
# 1. DT(decision tree)
ucla <- read.csv('https://stats.idre.ucla.edu/stat/data/binary.csv')
str(ucla)
ucla$admit <- as.factor(ucla$admit)
str(ucla)
dtc <- rpart(admit ~., ucla)
dtc
par(mflow=c(1,1),xpd=NA)
plot(dtc)
text(dtc, use.n = T)
# 예측
pred <- predict(dtc, ucla, type='class')
table(pred, ucla$admit)
(249+54)/ 400
library(caret)
# 평가
confusionMatrix(pred, ucla$admit)
library(randomForest)
# 분류(Classification)
# 결정 트리(Decision Tree)
library(rpart)
head(iris)
dtc <- rpart(Species ~ ., iris)     # iris 데이터를 결정 트리로 학습
summary(dtc)
dtc
# 결정 트리 시각화
par(mflow=c(1,1),xpd=NA)
plot(dtc)
text(dtc, use.n = T)
# 예측
pred <- predict(dtc, iris, type='class')
table(pred, iris$Species)                 # (50+49+45)/150
# 평가
library(caret)
confusionMatrix(pred, iris$Species)       # (50+49+45)/150 = 0.96
# 시각화
library(rpart.plot)
rpart.plot(dtc)
rpart.plot(dtc, type=4)
# 훈련/테스트 셋으로 분리하여 시행
set.seed(2021)
iris_index <- sample(1:nrow(iris),0.8*nrow(iris))
set.seed(2021)
ucla_index <- sample(1:nrow(ucla),0.8*nrow(ucla))
str(ucla_index)
str(ucla)
nrow(ucla)
set.seed(2021)
ucla_index <- sample(1:nrow(ucla),0.8*nrow(ucla))
str(ucla_index)
set.seed(2021)
ucla_index <- sample(1:nrow(ucla),0.8*nrow(ucla))
str(ucla_index)
ucla_index <- sample(1:nrow(ucla),0.8*nrow(ucla))
str(ucla_index)
ucla_train <- ucla[ucla_index,]
ucla_test <- ucla[-ucla_index]
ucla_train <- ucla[ucla_index,]
ucla_test <- ucla[-ucla_index,]
dim(iris_train)
dim(ucla_train)
table(ucla_train$admit)
table(ucla_test$admit)
table(ucla_test$admit)
# 모델링
dtc <- rpart(admit ~ ., ucla_train)
# 예측
pred <- predict(dtc, ucla_test, type='class')
pred
table(pred)
table(pred,ucla$admit)
table(pred, ucla$admit)
ucla$admit
table(pred)
# 평가
confusionMatrix(pred, ucla$admit)
# 평가
confusionMatrix(pred, ucla_test$admit)
ucla_index <- sample(1:nrow(ucla),0.8*nrow(ucla)) # 400개의 행중 320개 추출
str(ucla_index)
ucla_train <- ucla[ucla_index,]
ucla_test <- ucla[-ucla_index,]
# 모델링
dtc <- rpart(admit ~ ., ucla_train)
# 예측
pred <- predict(dtc, ucla_test, type='class')
table(pred)
# 평가
confusionMatrix(pred, ucla_test$admit)  # Accuracy = 0.6625
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
library(caret)
library(randomForest)
# 평가
confusionMatrix(pred, ucla_test$admit)
library(caret)
library(randomForest)
set.seed(2021)
train_index <- createDataPartition(iris$Species, p=0.8,list=F)
iris_train <- iris[train_index,]
iris_test <- iris[-train_index,]
# 모델링/학습
rf <- randomForest(Species ~., iris_train)
rf
# 예측
pred <- predict(rf, iris_test, type='class')
# 평가
confusionMatrix(pred, iris_test$Species)
# 시각화
plot(rf)
# 하이퍼 파라메터
small_forest <- randomForest(Species ~., iris_train,
ntree=100, nodesize=4)
s_pred <- predict(small_forest, iris_test, type='class')
confusionMatrix(s_pred, iris_test$Species)
plot(small_forest)
## 3. SVM(Support vector Machine)
```{r}
train_index <- createDataPartition(ucla$admit, p=0.8,list=F)
ucla_train <- ucla[train_index,]
ucla_test <- ucla[-train_index,]
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
library(caret)
library(randomForest)
library(e1071)
# 모델링/학습
svc <- svm(admit~., ucla_train)
# 예측
pred <- predict(svc, ucla_test, type='class')
# 평가
confusionMatrix(pred, ucla_test$admit)
# K-NN(Nearest Neighbor) - K 최근접
head(iris)
k
head(ucla)
head(ucla)
# 시각화
rpart.plot(dtc)
# 시각화
plot(rf)
# 시각화
plot(rf)
library(caret)
library(e1071)
set.seed(2021)
train_index <- createDataPartition(iris$Species, p=0.8, list=F)
iris_train <- iris[train_index,]
iris_test <- iris[-train_index,]
# 모델링
svc <- svm(Species~., iris_train)
# 예측
pred <- predict(svc, iris_test, type='class')
# 평가
table(pred, iris_test$Species)
confusionMatrix(pred, iris_test$Species)
# 하이퍼 파라미터 C(cost)
svc100 <- svm(Species~., iris_train, cost=100)
pred100 <- predict(svc100, iris_test, type='class')
table(pred100, iris_test$Species)
svc001 <- svm(Species~., iris_train, cost=0.01)
pred001 <- predict(svc001, iris_test, type='class')
table(pred001, iris_test$Species)
# 모델을 훈련했을 때의 데이터로 예측
self100 <- predict(svc100, iris_train, type='class')
table(self100, iris_train$Species)
self001 <- predict(svc100, iris_train, type='class')
table(self001, iris_train$Species)
plot(svc)
library(e1071)
library(caret)
library(e1071)
set.seed(2021)
train_index <- createDataPartition(iris$Species, p=0.8, list=F)
iris_train <- iris[train_index,]
iris_test <- iris[-train_index,]
# 모델링
svc <- svm(Species~., iris_train)
# 예측
pred <- predict(svc, iris_test, type='class')
# 평가
table(pred, iris_test$Species)
confusionMatrix(pred, iris_test$Species)
# 하이퍼 파라미터 C(cost)
svc100 <- svm(Species~., iris_train, cost=100)
pred100 <- predict(svc100, iris_test, type='class')
table(pred100, iris_test$Species)
library(caret)
library(e1071)
set.seed(2021)
train_index <- createDataPartition(iris$Species, p=0.8, list=F)
iris_train <- iris[train_index,]
iris_test <- iris[-train_index,]
# 모델링
svc <- svm(Species~., iris_train)
# 예측
pred <- predict(svc, iris_test, type='class')
# 평가
table(pred, iris_test$Species)
confusionMatrix(pred, iris_test$Species)
# 하이퍼 파라미터 C(cost)
svc100 <- svm(Species~., iris_train, cost=100)
pred100 <- predict(svc100, iris_test, type='class')
table(pred100, iris_test$Species)
svc001 <- svm(Species~., iris_train, cost=0.01)
pred001 <- predict(svc001, iris_test, type='class')
table(pred001, iris_test$Species)
# 모델을 훈련했을 때의 데이터로 예측
self100 <- predict(svc100, iris_train, type='class')
table(self100, iris_train$Species)
self001 <- predict(svc100, iris_train, type='class')
table(self001, iris_train$Species)
library(caret)
library(e1071)
set.seed(2021)
train_index <- createDataPartition(iris$Species, p=0.8, list=F)
iris_train <- iris[train_index,]
iris_test <- iris[-train_index,]
# 모델링
svc <- svm(Species~., iris_train)
# 예측
pred <- predict(svc, iris_test, type='class')
# 평가
table(pred, iris_test$Species)
confusionMatrix(pred, iris_test$Species)
library(caret)
library(e1071)
set.seed(2021)
train_index <- createDataPartition(iris$Species, p=0.8, list=F)
iris_train <- iris[train_index,]
iris_test <- iris[-train_index,]
# 모델링
svc <- svm(Species~., iris_train)
# 예측
pred <- predict(svc, iris_test, type='class')
# 평가
table(pred, iris_test$Species)
confusionMatrix(pred, iris_test$Species)
# 하이퍼 파라미터 C(cost)
svc100 <- svm(Species~., iris_train, cost=100)
pred100 <- predict(svc100, iris_test, type='class')
table(pred100, iris_test$Species)
svc001 <- svm(Species~., iris_train, cost=0.01)
pred001 <- predict(svc001, iris_test, type='class')
table(pred001, iris_test$Species)
# train 함수
dt <- train(Species~., iris_train, method='rpart')
rf <- train(Species~., iris_train, method='rf')
sv <- train(Species~., iris_train, method='svmRadial')
kn <- train(Species~., iris_train, method='knn')
dt
head(wine)
library(wine)
library(ggplot2)
head(wine)
getwd()
wine <- read.csv('C:/workspace/r/data/wine.txt', sep=',')
wine <- read.table('C:/workspace/r/data/wine.txt', sep=',')
wine <- read.table('C:/workspace/r/data/wine.txt',header=T, sep=',')
# 2. RF(Random_Forest)
library(dplyr)
getwd()
wine <- read.table('C:/workspace/r/data/wine.txt',header=T, sep=',')
wine <- read.table('data/wine.data.txt', sep=',')
# 2. RF(Random_Forest)
library(dplyr)
getwd()
wine <- read.table('C:/workspace/r/data/wine.txt',header=T, sep=',')
wine <- read.table('data/wine.data.txt', sep=',')
head(wine)
wine <- read.table('C:/workspace/r/data/wine.data.txt',header=T, sep=',')
head(wine)
wine <- read.table('C:/workspace/r/data/wine.data.txt',header=T, sep=',')
head(wine)
# 모델링을 위한 가공
library(dplyr)
# Wine 데이터
wine <- read.table('data/wine.data.txt', sep=',')
head(wine)
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
library(caret)
library(randomForest)
library(e1071)
getwd()
getwd(C:/workspace/r)
getwd(C: /workspace/r)
wine <- read.table('C:/workspace/r/data/wine.data.txt',header=T, sep=',')
getwd()
wine <- read.table('C:/workspace/r/data/wine.data.txt',header=T, sep=',')
wine <- read.table('C:/workspace/r/data/wine.data.txt',header=TRUE, sep=',')
wine <- read.table('C:/workspace/r/data/wine.data.txt',header=TRUE, sep=',')
head(wine)
getwd()
wine <- read.table('C:/workspace/r/data/wine.data.txt',header=TRUE, sep=',')
head(wine)
# Wine 데이터
wine <- read.table('data/wine.data.txt', sep=',')
head(wine)
columns <- readLines('data/wine.name.txt')
columns
getwd()
setwd(C:/workspace/r)
setwd('C:/workspace/r')
# Wine 데이터
wine <- read.table('data/wine.data.txt', sep=',')
head(wine)
setwd('C:/workspace/r')
getwd()
getwd()
# Wine 데이터
wine <- read.table('data/wine.data.txt', sep=',')
head(wine)
columns <- readLines('data/wine.name.txt')
columns
setwd('C:/workspace/r')
wine <- read.table('data/wine.data.txt', sep=',')
setwd('C:/workspace/r')
wine <- read.table('data/wine.data.txt', sep=',')
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
library(caret)
library(randomForest)
library(e1071)
setwd('C:/workspace/r')
getwd()
get(wd)
getwd()
wine <- read.table('C:/workspace/r/data/wine.data.txt', sep=',')
# 모델링을 위한 가공
library(dplyr)
setwd('C:/workspace/r')
# Wine 데이터
wine <- read.table('data/wine.data.txt', sep=',')
head(wine)
columns <- readLines('data/wine.name.txt')
columns
# wine 데이터의 column명
names(wine)
names(wine)[2:14] <- columns
names(wine)
names(wine)[2:14] <- substr(columns,4,nchar(columns))
names(wine)[1] <- 'Y'
names(wine)
names(wine)[2:14] <- columns
names(wine)[2:14] <- substr(columns,4,nchar(columns))
names(wine)[1] <- 'Y'
head(wine)
wine <- read.table('C:/workspace/r/data/wine.data.txt', sep=',')
columns <- readLines('C:/workspace/r/data/wine.data.txt')
names(wine)[2:14] <- columns
names(wine)[2:14] <- substr(columns,4,nchar(columns))
names(wine)[1] <- 'Y'
head(wine)
wine <- read.table('C:/workspace/r/data/wine.data.txt', sep=',')
columns <- readLines('C:/workspace/r/data/wine.data.txt')
names(wine)[2:14] <- columns
names(wine)[2:14] <- substr(columns,4,nchar(columns))
names(wine)[1] <- 'Y'
head(wine)
library(rpart.plot)
library(class)
# 모델링을 위한 가공
library(dplyr)
setwd('C:/workspace/r')
# Wine 데이터
wine <- read.table('data/wine.data.txt', sep=',')
head(wine)
columns <- readLines('data/wine.name.txt')
columns
# wine 데이터의 column명
names(wine)
names(wine)[2:14] <- columns
names(wine)
# substr 함수
a <- "A quick brown fox jumps over the lazy dog."
nchar(a)
substr(a, 3, 7)
substr(a, nchar(a)-3, nchar(a)-1)
names(wine)[2:14] <- substr(columns,4,nchar(columns))
names(wine)[1] <- 'Y'
names(wine)
head(wine)
# 모델링을 위한 가공
library(dplyr)
setwd('C:/workspace/r')
# Wine 데이터
wine <- read.table('data/wine.data.txt', sep=',')
head(wine)
columns <- readLines('data/wine.name.txt')
columns
# wine 데이터의 column명
names(wine)
names(wine)[2:14] <- columns
names(wine)
substr(a, nchar(a)-3, nchar(a)-1)
names(wine)[2:14] <- substr(columns,4,nchar(columns))
names(wine)[1] <- 'Y'
names(wine)
head(wine)
# 모델링을 위한 가공
library(dplyr)
setwd('C:/workspace/r')
# Wine 데이터
wine <- read.table('data/wine.data.txt', sep=',')
head(wine)
columns <- readLines('data/wine.name.txt')
columns
# wine 데이터의 column명
names(wine)
names(wine)[2:14] <- columns
names(wine)
names(wine)[2:14] <- substr(columns,4,nchar(columns))
names(wine)[1] <- 'Y'
names(wine)
head(wine)
wine <- read.table('C:/workspace/r/data/wine.data.txt', sep=',')
columns <- readLines('C:/workspace/r/data/wine.data.txt')
names(wine)[2:14] <- columns
names(wine)[2:14] <- substr(columns,4,nchar(columns))
names(wine)[1] <- 'Y'
setwd('C:/workspace/r')
# Wine 데이터
wine <- read.table('data/wine.data.txt', sep=',')
head(wine)
columns <- readLines('data/wine.name.txt')
columns
names(wine)[2:14] <- columns
# 모델링을 위한 가공
library(dplyr)
setwd('C:/workspace/r')
# Wine 데이터
wine <- read.table('data/wine.data.txt', sep=',')
head(wine)
columns <- readLines('data/wine.name.txt')
columns
# wine 데이터의 column명
names(wine)
names(wine)[2:14] <- columns
names(wine)
# 모델링을 위한 가공
library(dplyr)
setwd('C:/workspace/r')
# Wine 데이터
wine <- read.table('data/wine.data.txt', sep=',')
head(wine)
columns <- readLines('data/wine.name.txt')
names(wine)[2:14] <- columns
names(wine)[2:14] <- substr(columns,4,nchar(columns))
names(wine)[1] <- 'Y'
names(wine)
head(wine)
wine <- read.table('C:/workspace/r/data/wine.data.txt', sep=',')
columns <- readLines('C:/workspace/r/data/wine.name.txt')
names(wine)[2:14] <- columns
names(wine)[2:14] <- substr(columns,4,nchar(columns))
names(wine)[1] <- 'Y'
head(wine)
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
library(e1071)
library(class)
str(wine)
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
library(caret)
library(randomForest)
library(e1071)
library(e1071)
train_index <- createDataPartition(ucla$admit, p=0.8,list=F)
